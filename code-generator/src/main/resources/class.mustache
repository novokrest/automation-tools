{{#witPackage}}
package generated;

{{/witPackage}}
{{#withJson}}
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

{{/withJson}}
{{#isNonNullAnnotationUsed}}
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
{{/isNonNullAnnotationUsed}}
{{#withEquals}}
import java.util.Objects;
{{/withEquals}}
{{#isRequireNonNullUsed}}

import static java.util.Objects.requireNonNull;
{{/isRequireNonNullUsed}}

public class {{className}} {

    {{#fields}}
{{> field}}
    {{/fields}}
    {{#withJson}}
    @JsonCreator
    {{/withJson}}
    private {{className}}(
        {{#fields}}
        {{#withJson}}@JsonProperty("{{name}}") {{/withJson}}{{> parameter}}{{^isLast}},{{/isLast}}
        {{/fields}}
    ) {
        {{#fields}}
        {{> field_init}}
        {{/fields}}
    }

    {{#fields}}
{{> get_property}}
    {{/fields}}
    {{#withEquals}}
{{> equals}}
    {{/withEquals}}
{{> to_string}}
    {{#isBuilderFactoryInsideModelClass}}
    {{> builder_factory_method}}
    {{/isBuilderFactoryInsideModelClass}}
    public static class Builder {

        {{#fields}}
        {{> builder_field}}
        {{/fields}}

        private Builder() {
        }

        {{^isBuilderFactoryInsideModelClass}}
{{> builder_factory_method}}
        {{/isBuilderFactoryInsideModelClass}}
        {{#fields}}
{{> builder_set_method}}
        {{/fields}}
        {{#isNonNullAnnotationUsed}}@Nonnull{{/isNonNullAnnotationUsed}}
        public {{className}} build() {
            return new {{className}}(
                {{#fields}}
                {{#withJson}}
                {{> check_parameter}}{{^isLast}},{{/isLast}}
                {{/withJson}}{{^withJson}}
                {{name}}{{^isLast}},{{/isLast}}
                {{/withJson}}
                {{/fields}}
            );
        }

    }

}
